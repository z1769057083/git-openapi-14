<import name="ap-icon" src="../common/icon/index"></import>
<template>
  <div class="ap-search-bar {{classNames}}">
    <div class="{{pixClass}}">
      <div class="box">
        <ap-icon type="search" size="36" color="#afafaf"></ap-icon>
        <input
          id="input"
          style="text-align:{{mask ? 'center' : 'left'}};placeholder-color:{{placeholderColor}}"
          enterkeytype="{{enterkeytype}}"
          type="text"
          value="{{value}}"
          onchange="bindChange"
          onfocus="bindFocus"
          onblur="bindBlur"
          maxlength="{{maxlength}}"
          placeholder="{{data.placeholder || '搜索'}}"
          disabled="{{disabled}}"
          onenterkeyclick="enterEvent"
          onselectionchange="bindSelectionchange"
        />
        <ap-icon
          type="close-circle"
          size="36"
          color="#afafaf"
          onclick="bindClear"
          if="{{clearIcon && clear}}"
        ></ap-icon>
      </div>
      <text class="cancel" if="{{cancel}}" onclick="bindCancel">
        {{ cancelText }}
      </text>
    </div>
  </div>
</template>

<script>
import {getClasses, getHttpImageUrl} from '@/utils';

export default {
  data: {
    mask: true,
    clearIcon: false,
    value: '',
    cancel: false
  },
  props: {
    node: {
      type: Object,
      default: {}
    },
    hasCancel: {
      type: Boolean,
      default: false
    },
    placeholderColor: {
      type: String,
      default: 'rgb(128, 128, 128)'
    },
    maxlength: {
      type: Number
    },
    pixClass: {
      type: String,
      default: 'ap-search-wrap'
    },
    disabled: {
      type: Boolean,
      default: false
    },
    cancelText: {
      type: String,
      default: '取消'
    },
    inputFocus: {
      type: Boolean,
      default: false
    },
    inputValue: {
      type: String,
      default: ''
    },
    clear: {
      type: Boolean,
      default: true
    },
    select: {
      type: Boolean,
      default: false
    },
    selectionStart: {
      type: Number
    },
    selectionEnd: {
      type: Number
    },
    enterkeytype: {
      type: String,
      default: 'default'
    }
  },
  computed: {
    data() {
      return this.node.componentProperties.data;
    },
    classNames() {
      return getClasses(this.node);
    }
  },
  onInit() {
    if (this.hasCancel) {
      this.cancel = this.hasCancel;
    }
    if (this.inputValue) {
      this.value = this.inputValue;
    }
  },
  onReady() {
    if (this.inputFocus === true && this.disabled === false) {
      this.mask = false;
      this.$element('input').focus({focus: true});
    }
    if (this.select === true) {
      this.$element('input').select();
    }
    if (this.selectionStart !== undefined && this.selectionEnd !== undefined) {
      this.$element('input').setSelectionRange({
        start: this.selectionStart,
        end: this.selectionEnd
      });
    }
  },
  bindFocus(evt) {
    this.$emit('handleEvent', 'focus');
    this.cancel = true;
    this.mask = false;
  },
  bindBlur(evt) {
    this.$emit('handleEvent', 'blur');
    if (!this.hasCancel) {
      this.cancel = false;
    }
    if (this.clear === true && this.disabled === false) {
      this.clearIcon = false;
    }
    this.value = '';
    this.mask = true;
    this.$element('input').focus({focus: false});
  },
  bindClear() {
    this.$emit('clear', {inputValue: this.value});
    this.inputValue ? (this.value = this.inputValue) : (this.value = '');
  },
  bindChange(evt) {
    this.$emit('handleEvent', 'change');
    this.value = evt.value;
    if (this.value !== '') {
      this.clearIcon = true;
    }
  },
  bindCancel() {
    this.$emit('handleEvent', 'cancel');
    this.bindBlur();
  },
  enterEvent(evt) {
    this.$emit('handleEvent', 'submit');
  },
  bindSelectionchange(evt) {
    this.$emit('selectionchange', {event: evt});
  }
};
</script>

<style lang="less">
@import '@/static/styles/base.less';

.ap-search-wrap {
  background-color: #efeff4;
  height: 100%;
  width: 100%;
  align-items: center;
  padding: 0 10 * @width;
  .box {
    width: 100%;
    height: 100%;
    border-radius: 4 * @width;
    align-items: center;
    padding: 0 5 * @width;
    input {
      flex: 1;
      font-size: 14 * @width;
      margin-left: 5 * @width;
      background-color: transparent;
    }
    .default {
      margin-left: 5 * @width;
      color: #808080;
      text-align: left;
    }
  }
}
.cancel {
  width: 10%;
  text-align: center;
  color: #888888;
  margin-left: 10 * @width;
  font-size: 14 * @width;
  flex-shrink: 0;
}
</style>
